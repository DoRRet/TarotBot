from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from config import Config
import logging
from database import (
    add_user, get_user, get_attempts, update_attempts,
    get_active_subscription, save_reading, add_subscription,
    execute_query
)
from tarot_interpreter import TarotInterpreter
from datetime import datetime
import html
import random
import asyncio
from telegram.error import BadRequest, RetryAfter
import difflib
import unidecode

CARDS_IMAGE = "cards_back.png"
PICK_CARDS = 9000

logger = logging.getLogger(__name__)

(
    CHOOSE_METHOD, QUESTION, SITUATION,
    NUM_CARDS, ENTER_CARDS, ASK_QUESTION
) = range(6)

TAROT_DECK = [
    # –°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã (22 –∫–∞—Ä—Ç—ã)
    "–®—É—Ç", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", 
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫", 
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", 
    "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", 
    "–°—É–¥", "–ú–∏—Ä",
    
    # –ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã: –ñ–µ–∑–ª—ã (14 –∫–∞—Ä—Ç)
    "–¢—É–∑ –ñ–µ–∑–ª–æ–≤", "–î–≤–æ–π–∫–∞ –ñ–µ–∑–ª–æ–≤", "–¢—Ä–æ–π–∫–∞ –ñ–µ–∑–ª–æ–≤", "–ß–µ—Ç–≤–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", 
    "–ü—è—Ç–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–®–µ—Å—Ç–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–°–µ–º–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–í–æ—Å—å–º–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", 
    "–î–µ–≤—è—Ç–∫–∞ –ñ–µ–∑–ª–æ–≤", "–î–µ—Å—è—Ç–∫–∞ –ñ–µ–∑–ª–æ–≤", "–ü–∞–∂ –ñ–µ–∑–ª–æ–≤", "–†—ã—Ü–∞—Ä—å –ñ–µ–∑–ª–æ–≤", 
    "–ö–æ—Ä–æ–ª–µ–≤–∞ –ñ–µ–∑–ª–æ–≤", "–ö–æ—Ä–æ–ª—å –ñ–µ–∑–ª–æ–≤",
    
    # –ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã: –ö—É–±–∫–∏ (14 –∫–∞—Ä—Ç)
    "–¢—É–∑ –ö—É–±–∫–æ–≤", "–î–≤–æ–π–∫–∞ –ö—É–±–∫–æ–≤", "–¢—Ä–æ–π–∫–∞ –ö—É–±–∫–æ–≤", "–ß–µ—Ç–≤–µ—Ä–∫–∞ –ö—É–±–∫–æ–≤", 
    "–ü—è—Ç–µ—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–®–µ—Å—Ç–µ—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–°–µ–º–µ—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–í–æ—Å—å–º–µ—Ä–∫–∞ –ö—É–±–∫–æ–≤", 
    "–î–µ–≤—è—Ç–∫–∞ –ö—É–±–∫–æ–≤", "–î–µ—Å—è—Ç–∫–∞ –ö—É–±–∫–æ–≤", "–ü–∞–∂ –ö—É–±–∫–æ–≤", "–†—ã—Ü–∞—Ä—å –ö—É–±–∫–æ–≤", 
    "–ö–æ—Ä–æ–ª–µ–≤–∞ –ö—É–±–∫–æ–≤", "–ö–æ—Ä–æ–ª—å –ö—É–±–∫–æ–≤",
    
    # –ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã: –ú–µ—á–∏ (14 –∫–∞—Ä—Ç)
    "–¢—É–∑ –ú–µ—á–µ–π", "–î–≤–æ–π–∫–∞ –ú–µ—á–µ–π", "–¢—Ä–æ–π–∫–∞ –ú–µ—á–µ–π", "–ß–µ—Ç–≤–µ—Ä–∫–∞ –ú–µ—á–µ–π", 
    "–ü—è—Ç–µ—Ä–∫–∞ –ú–µ—á–µ–π", "–®–µ—Å—Ç–µ—Ä–∫–∞ –ú–µ—á–µ–π", "–°–µ–º–µ—Ä–∫–∞ –ú–µ—á–µ–π", "–í–æ—Å—å–º–µ—Ä–∫–∞ –ú–µ—á–µ–π", 
    "–î–µ–≤—è—Ç–∫–∞ –ú–µ—á–µ–π", "–î–µ—Å—è—Ç–∫–∞ –ú–µ—á–µ–π", "–ü–∞–∂ –ú–µ—á–µ–π", "–†—ã—Ü–∞—Ä—å –ú–µ—á–µ–π", 
    "–ö–æ—Ä–æ–ª–µ–≤–∞ –ú–µ—á–µ–π", "–ö–æ—Ä–æ–ª—å –ú–µ—á–µ–π",
    
    # –ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã: –ü–µ–Ω—Ç–∞–∫–ª–∏ (14 –∫–∞—Ä—Ç)
    "–¢—É–∑ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–î–≤–æ–π–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–¢—Ä–æ–π–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ß–µ—Ç–≤–µ—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", 
    "–ü—è—Ç–µ—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–®–µ—Å—Ç–µ—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–°–µ–º–µ—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–í–æ—Å—å–º–µ—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", 
    "–î–µ–≤—è—Ç–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–î–µ—Å—è—Ç–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ü–∞–∂ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–†—ã—Ü–∞—Ä—å –ü–µ–Ω—Ç–∞–∫–ª–µ–π", 
    "–ö–æ—Ä–æ–ª–µ–≤–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ö–æ—Ä–æ–ª—å –ü–µ–Ω—Ç–∞–∫–ª–µ–π"
]

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è ---

def normalize_card_name(name: str) -> str:
    name = name.strip().lower()
    name = name.replace("—ë", "–µ")
    name = unidecode.unidecode(name)
    return name

def match_card_name(user_input, card_list, min_ratio=0.7):
    input_norm = normalize_card_name(user_input)
    deck_norm = [normalize_card_name(c) for c in card_list]
    if input_norm in deck_norm:
        idx = deck_norm.index(input_norm)
        return card_list[idx], True
    matches = difflib.get_close_matches(input_norm, deck_norm, n=1, cutoff=min_ratio)
    if matches:
        idx = deck_norm.index(matches[0])
        return card_list[idx], True
    return user_input, False

class BaseHandler:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å –æ–±—â–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    
    @staticmethod
    async def check_access(telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ä–∞—Å–∫–ª–∞–¥–∞–º"""
        if await get_active_subscription(telegram_id):
            return True
        attempts = await get_attempts(telegram_id)
        return attempts > 0 if attempts is not None else False

    @staticmethod
    def create_keyboard(buttons: list, columns: int = 2) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º"""
        keyboard = []
        row = []
        
        for i, (text, data) in enumerate(buttons, 1):
            row.append(InlineKeyboardButton(text, callback_data=data))
            if i % columns == 0 or i == len(buttons):
                keyboard.append(row)
                row = []
                
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    async def back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        context.user_data.clear()
        await StartHandler.start(update, context)
        return ConversationHandler.END

class CardMeaningsHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ä—Ç –¢–∞—Ä–æ"""
    
    @staticmethod
    async def process_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Å –Ω–µ—á–µ—Ç–∫–∏–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º)"""
        search_query = update.message.text
        results = []
        for card in TAROT_DECK:
            matched, found = match_card_name(search_query, [card])
            if found:
                card_data = TarotInterpreter._card_meanings.get(card, {})
                results.append((card, card_data.get("category", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")))
        if not results:
            query_norm = normalize_card_name(search_query)
            for card in TAROT_DECK:
                if query_norm in normalize_card_name(card):
                    card_data = TarotInterpreter._card_meanings.get(card, {})
                    results.append((card, card_data.get("category", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")))
        if not results:
            await update.message.reply_text(
                "üîç –ö–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
                reply_markup=BaseHandler.create_keyboard([("üîô –ù–∞–∑–∞–¥", "card_meanings")])
            )
            return "SEARCH_CARD"

        if len(results) == 1:
            card_name, _ = results[0]
            meaning = await TarotInterpreter.get_card_meaning(card_name)
            buttons = [
                ("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "card_meanings"),
                ("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")
            ]
            await update.message.reply_text(
                meaning,
                reply_markup=BaseHandler.create_keyboard(buttons),
                parse_mode="Markdown"
            )
            return ConversationHandler.END

        buttons = [
            [InlineKeyboardButton(
                f"{card} ({category})",
                callback_data=f"meaning_{card}_0"
            )] for card, category in results
        ]
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="card_meanings")])

        await update.message.reply_text(
            f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}':",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return ConversationHandler.END

    @staticmethod
    async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞—Ä—Ç"""
        query = update.callback_query
        await query.answer()
        
        buttons = [
            ("üÉè –°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã", "major_arcana"),
            ("üî• –ñ–µ–∑–ª—ã", "wands"),
            ("üíß –ö—É–±–∫–∏", "cups"),
            ("‚öîÔ∏è –ú–µ—á–∏", "swords"),
            ("üí∞ –ü–µ–Ω—Ç–∞–∫–ª–∏", "pentacles"),
            ("üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã", "search_card"),
            ("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")
        ]
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await query.edit_message_text(
                    text="üìú *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–π:*",
                    reply_markup=BaseHandler.create_keyboard(buttons, columns=2),
                    parse_mode="Markdown"
                )
            except BadRequest as e:
                if "There is no text in the message to edit" in str(e):
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await context.bot.send_message(
                        chat_id=query.from_user.id,
                        text="üìú *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–π:*",
                        reply_markup=BaseHandler.create_keyboard(buttons, columns=2),
                        parse_mode="Markdown"
                    )
                else:
                    raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ BadRequest
        except Exception as e:
            logger.error(f"Error in show_categories: {e}", exc_info=True)
            try:
                await context.bot.send_message(
                    chat_id=query.from_user.id,
                    text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=BaseHandler.create_keyboard([("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")])
                )
            except Exception as send_error:
                logger.error(f"Failed to send error message: {send_error}")

    @staticmethod
    async def show_cards(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç
        if not TarotInterpreter._card_meanings:
            await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 2-3 —Å–µ–∫—É–Ω–¥—ã...")
            await TarotInterpreter.load_meanings()
        
        category_map = {
            "major_arcana": "–°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã",
            "wands": "–ñ–µ–∑–ª—ã",
            "cups": "–ö—É–±–∫–∏",
            "swords": "–ú–µ—á–∏",
            "pentacles": "–ü–µ–Ω—Ç–∞–∫–ª–∏"
        }
        
        category_key = query.data
        category_name = category_map.get(category_key)
        
        if not category_name:
            await query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
        cards_in_category = [
            card for card in TAROT_DECK 
            if TarotInterpreter._card_meanings.get(card, {}).get("category") == category_name
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É (–¢—É–∑, 2-10, –ü–∞–∂, –†—ã—Ü–∞—Ä—å, –ö–æ—Ä–æ–ª–µ–≤–∞, –ö–æ—Ä–æ–ª—å)
        def sort_key(card):
            parts = card.split()
            if parts[0].isdigit():
                return (0, int(parts[0]))
            order = {"–¢—É–∑": 1, "–ü–∞–∂": 11, "–†—ã—Ü–∞—Ä—å": 12, "–ö–æ—Ä–æ–ª–µ–≤–∞": 13, "–ö–æ—Ä–æ–ª—å": 14}
            return (0, order.get(parts[0], 99))
        
        cards_in_category.sort(key=sort_key)
        
        if not cards_in_category:
            await query.answer("–ö–∞—Ä—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
        def get_short_name(full_name):
            # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–∞—Ä—Ç –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É
            if full_name[0].isdigit():
                return full_name[0]
            # –î–ª—è –ø—Ä–∏–¥–≤–æ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –∏ –¢—É–∑–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if full_name.startswith(("–¢—É–∑", "–ü–∞–∂", "–†—ã—Ü–∞—Ä—å", "–ö–æ—Ä–æ–ª–µ–≤–∞", "–ö–æ—Ä–æ–ª—å")):
                return full_name.split()[0]
            return full_name
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ü–µ–Ω—Ç–∞–∫–ª–µ–π
        if category_key == "pentacles":
            buttons = []
            # –ß–∏—Å–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã (1-10)
            for i in range(0, 10, 2):
                row = []
                card1 = cards_in_category[i]
                row.append(InlineKeyboardButton(
                    get_short_name(card1),
                    callback_data=f"meaning_{card1}_0"
                ))
                if i+1 < 10:
                    card2 = cards_in_category[i+1]
                    row.append(InlineKeyboardButton(
                        get_short_name(card2),
                        callback_data=f"meaning_{card2}_0"
                    ))
                buttons.append(row)
            
            # –ü—Ä–∏–¥–≤–æ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã
            court_cards = cards_in_category[10:]
            for i in range(0, len(court_cards), 2):
                row = []
                card1 = court_cards[i]
                row.append(InlineKeyboardButton(
                    get_short_name(card1),
                    callback_data=f"meaning_{card1}_0"
                ))
                if i+1 < len(court_cards):
                    card2 = court_cards[i+1]
                    row.append(InlineKeyboardButton(
                        get_short_name(card2),
                        callback_data=f"meaning_{card2}_0"
                    ))
                buttons.append(row)
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            buttons = []
            for i in range(0, len(cards_in_category), 2):
                row = []
                # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ
                card1 = cards_in_category[i]
                row.append(InlineKeyboardButton(
                    get_short_name(card1), 
                    callback_data=f"meaning_{card1}_0"
                ))
                
                # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if i+1 < len(cards_in_category):
                    card2 = cards_in_category[i+1]
                    row.append(InlineKeyboardButton(
                        get_short_name(card2),
                        callback_data=f"meaning_{card2}_0"
                    ))
                
                buttons.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="card_meanings")])
        
        try:
            await query.edit_message_text(
                text=f"üÉè *{category_name}* - –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:\n",
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"Error showing cards: {e}")
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text=f"üÉè *{category_name}* - –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:",
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode="Markdown"
            )

    @staticmethod
    async def show_meaning(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º"""
        query = update.callback_query
        await query.answer()
        
        try:
            data = query.data.split("_")
            card_name = "_".join(data[1:-1])
            is_reversed = data[-1] == "1"
            
            card_data = TarotInterpreter._card_meanings.get(card_name, {})
            if not card_data:
                await query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            position = "–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ" if is_reversed else "–ü—Ä—è–º–æ–µ"
            text = (
                f"‚ú® *{card_name}* ({position} –ø–æ–ª–æ–∂–µ–Ω–∏–µ)\n"
                f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {card_data.get('category', '?')}\n\n"
                f"üìñ *–ó–Ω–∞—á–µ–Ω–∏–µ:*\n{card_data.get('meaning', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n\n"
                f"üîÆ *{position} –ø–æ–ª–æ–∂–µ–Ω–∏–µ:*\n"
                f"{card_data.get('reversed' if is_reversed else 'upright', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            buttons = [
                [
                    InlineKeyboardButton(
                        "üîÑ –ü–æ–∫–∞–∑–∞—Ç—å " + ("–ø—Ä—è–º–æ–µ" if is_reversed else "–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ"),
                        callback_data=f"meaning_{card_name}_{1 if not is_reversed else 0}"
                    )
                ],
                [
                    InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start_over")
                ]
            ]
            
            await query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"Error showing card meaning: {e}")
            await query.edit_message_text(
                text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã",
                reply_markup=BaseHandler.create_keyboard([("üîô –ù–∞–∑–∞–¥", "card_meanings")])
            )

    @staticmethod
    async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            text="üîç *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:*",
            reply_markup=BaseHandler.create_keyboard([("üîô –û—Ç–º–µ–Ω–∞", "card_meanings")]),
            parse_mode="Markdown"
        )
        return "SEARCH_CARD"

    @staticmethod
    async def process_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        search_query = update.message.text
        results = await TarotInterpreter.search_cards(search_query)
        
        if not results:
            await update.message.reply_text(
                "üîç –ö–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
                reply_markup=BaseHandler.create_keyboard([("üîô –ù–∞–∑–∞–¥", "card_meanings")])
            )
            return "SEARCH_CARD"
        
        if len(results) == 1:
            card_name, _ = results[0]
            meaning = await TarotInterpreter.get_card_meaning(card_name)
            buttons = [
                ("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "card_meanings"),
                ("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")
            ]
            await update.message.reply_text(
                meaning,
                reply_markup=BaseHandler.create_keyboard(buttons),
                parse_mode="Markdown"
            )
            return ConversationHandler.END
        
        buttons = [
            [InlineKeyboardButton(
                f"{card} ({category})", 
                callback_data=f"meaning_{card}_0"
            )] for card, category in results
        ]
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="card_meanings")])
        
        await update.message.reply_text(
            f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}':",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return ConversationHandler.END

    @staticmethod
    async def cancel_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞"""
        await update.message.reply_text(
            "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=BaseHandler.create_keyboard([("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")])
        )
        return ConversationHandler.END

class StartHandler(BaseHandler):
    @staticmethod
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        referrer_id = None
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç (start —Å id)
        if update.message and update.message.text:
            args = update.message.text.split()
            if len(args) > 1 and args[1].isdigit():
                if int(args[1]) != user.id:   # –∑–∞–ø—Ä–µ—Ç —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª–∞
                    referrer_id = int(args[1])
        # –ü–µ—Ä–µ–¥–∞–µ–º context –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ–Ω—É—Å–∞-–ø—Ä–∏–≥–ª–∞—à–∞—Ç–µ–ª—é
        await add_user(user.id, user.username, referrer_id, context=context)
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            await add_user(user.id, user.username)

            buttons = [
                ("üÉè –î–Ω–µ–≤–Ω–æ–π —Ä–∞—Å–∫–ª–∞–¥", "daily_reading"),
                ("üÉè –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥", "weekly_reading"),
                ("üÉè –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥", "request_reading"),
                ("üíé –ü–æ–¥–ø–∏—Å–∫–∞", "subscription"),
                ("üìú –ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç", "card_meanings"),
                ("üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "consultation"),
                ("üë´ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", "referral"),
                ("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help") 
            ]
            
            await context.bot.send_photo(
                chat_id=user.id,
                photo=Config.WELCOME_IMAGE_URL,
                caption="üåü *–ë–µ–∑ –ª–∏—à–Ω–µ–π –º–∞–≥–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ —è—Å–Ω–æ—Å—Ç—å!*\n\n"
"–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ –º—ã—Å–ª—è—Ö –∏ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Å—Ç–Ω—ã–π —Å–æ–≤–µ—Ç ‚Äî –∫–∞—Ä—Ç—ã –Ω–µ –ª—å—Å—Ç—è—Ç –∏ –Ω–µ –ø—É–≥–∞—é—Ç, –∞ –ø–æ–º–æ–≥–∞—é—Ç —É–≤–∏–¥–µ—Ç—å —Å—É—Ç—å.\n\n"
"–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:\n",
                parse_mode="Markdown",
                reply_markup=BaseHandler.create_keyboard(buttons)
            )
        except Exception as e:
            logger.error(f"Start error: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
        await HelpHandler.show_help(update, context)

class HelpHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    
    @staticmethod
    async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —É—Å—Ç–æ–π—á–∏–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        query = update.callback_query
        chat_id = update.effective_chat.id
     
        help_text = (
            "üìö <b>–ù–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ –º—ã—Å–ª—è—Ö ‚Äî –ø—Ä–æ—Å—Ç–æ!</b>\n\n"
            "üîÆ <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>\n"
            "1. üÉè <b>–†–∞—Å–∫–ª–∞–¥</b> ‚Äî –ø–æ–ª—É—á–∏ —á–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Ç–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–∞–º\n"
            "2. üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞</b> ‚Äî –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–∫–ª–∞–¥–∞–º, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å\n"
            "3. üìú <b>–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç</b> ‚Äî –ø–æ–ª–Ω–∞—è –±–∞–∑–∞ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤\n"
            "4. üìû <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b> ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—Ç –æ–ø—ã—Ç–Ω–æ–≥–æ —Ç–∞—Ä–æ–ª–æ–≥–∞\n"
            "5. üë• <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞</b> ‚Äî –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "‚ùì <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "- –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é\n"
            "- –°–ª–µ–¥—É–π –ø–æ–¥—Å–∫–∞–∑–∫–∞–º ‚Äî –≤—Å—ë —á—ë—Ç–∫–æ –∏ –ø—Ä–æ—Å—Ç–æ\n"
            "- –î–ª—è –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî /cancel\n\n"
            f"üì© <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:</b> @{Config.ADMIN_USERNAME}\n"
            "üïí <b>–î–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–≥–¥–∞ ‚Äî —Ö–æ—Ç—å –Ω–æ—á—å—é, —Ö–æ—Ç—å –¥–Ω—ë–º</b>"
        )
     
        buttons = [
            ("üÉè –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥", "request_reading"),
            ("üíé –ü–æ–¥–ø–∏—Å–∫–∞", "subscription"),
            ("üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "consultation"),
            ("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")
        ]
        keyboard = BaseHandler.create_keyboard(buttons, columns=2)
     
        try:
            if query:
                await query.answer()
     
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                    if query.message.text:
                        await query.edit_message_text(
                            text=help_text,
                            reply_markup=keyboard,
                            parse_mode="HTML"
                        )
                    else:
                        raise BadRequest("no text to edit")
                except BadRequest as e:
                    logger.warning(f"Can't edit help message: {e}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=help_text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ callback)
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=help_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
     
        except Exception as e:
            logger.error(f"Error in show_help: {e}")
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=BaseHandler.create_keyboard([("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")])
            )

class ConsultationHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    
    @staticmethod
    async def start_consultation(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()
       
        buttons = [
            ("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "confirm_consultation"),
            ("üîô –ù–∞–∑–∞–¥", "start_over")
        ]
       
        text = (
        "üÉè <b>–†–∞–∑–±–µ—Ä—ë–º —Ç–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ –∫–∞—Ä—Ç–∞–º?</b> ü§î\n\n"
        "–≠—Ç–æ –Ω–µ —ç–∑–æ—Ç–µ—Ä–∏–∫–∞, –∞ <u>–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏</u>. –ö–∞–∫ —Å–æ–≤–µ—Ç —É–º–Ω–æ–≥–æ –¥—Ä—É–≥–∞, —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã –Ω–µ –≤—Ä—É—Ç –∏ –Ω–µ –ª—å—Å—Ç—è—Ç.\n\n"
        "üî• <b>–ß—Ç–æ –±—É–¥–µ—Ç:</b>\n"
        "‚Ä¢ –†–∞–∑–±–µ—Ä—ë–º 3-4 –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –≥–ª–æ–∂—É—Ç\n"
        "‚Ä¢ –ù–∞ –∫–∞–∂–¥—ã–π ‚Äî –≤ —Å—Ä–µ–¥–Ω–µ–º 25 –º–∏–Ω—É—Ç —á—ë—Ç–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ –≤–æ–¥—ã)\n"
        "‚Ä¢ –ù–∏–∫–∞–∫–æ–π ¬´—Å—É–¥—å–±—ã¬ª ‚Äî —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏–π\n\n"
        "üí° <b>–ß—Ç–æ –ø–æ–ª—É—á–∏—à—å:</b>\n"
        "‚Üí –û–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é\n"
        "‚Üí –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏, –∞ –Ω–µ —Ç—É–º–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
        "‚Üí –ù–∏–∫–∞–∫–æ–π –º–∏—Å—Ç–∏–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫–∞ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è\n\n"
        "‚è± <b>–í—Ä–µ–º—è:</b> 60-80 –º–∏–Ω—É—Ç ‚Äî –∫–∞–∫ —Ö–æ—Ä–æ—à–∏–π –ø–æ–¥–∫–∞—Å—Ç, –Ω–æ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ç–µ–±—è\n"
        "üí∏ <b>–¶–µ–Ω–∞:</b> 600‚ÇΩ ‚Äî –¥–µ—à–µ–≤–ª–µ, —á–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥, –∏ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º —Å–∞–º–æ–∫–æ–ø–∞–Ω–∏–µ\n\n"
        "üì≤ <b>–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Ä–∞–∑–ª–æ–∂–∏—Ç—å –≤—Å—ë –ø–æ –ø–æ–ª–æ—á–∫–∞–º ‚Äî –∂–º–∏ ¬´–ó–∞–∫–∞–∑–∞—Ç—å¬ª!</b>\n"
    )
       
        try:
            if query.message and query.message.text:
                await query.edit_message_text(
                    text=text,
                    reply_markup=BaseHandler.create_keyboard(buttons),
                    parse_mode="HTML"
                )
            else:
                # –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await context.bot.send_message(
                    chat_id=query.from_user.id,
                    text=text,
                    reply_markup=BaseHandler.create_keyboard(buttons),
                    parse_mode="HTML"
                )
        except BadRequest as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            logger.error(f"Error editing message: {e}")
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text=text,
                reply_markup=BaseHandler.create_keyboard(buttons),
                parse_mode="HTML"
            )


    @staticmethod
    async def confirm_consultation(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "‚úçÔ∏è *–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é*\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏ –Ω–∞ –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Ç–∞—Ä–æ–ª–æ–≥.",
            reply_markup=BaseHandler.create_keyboard([("üîô –û—Ç–º–µ–Ω–∞", "start_over")]),
            parse_mode="Markdown"
        )
        return "GET_CONSULTATION_DETAILS"

    @staticmethod
    async def get_consultation_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        try:
            user = update.effective_user
            question = update.message.text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ user_data
            context.user_data['consultation_question'] = question
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            question_html = html.escape(question)
            admin_text = (
                "üìû <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{html.escape(user.username) if user.username else '–Ω–µ—Ç username'} (ID: {user.id})\n"
                f"‚ùì –í–æ–ø—Ä–æ—Å:\n{question_html}\n\n"
                f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
            )
            
            await context.bot.send_message(
                chat_id=Config.ADMIN_CHAT_ID,
                text=admin_text,
                parse_mode="HTML"
            )
            
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(
                "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                "–ù–∞—à —Ç–∞—Ä–æ–ª–æ–≥ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                reply_markup=BaseHandler.create_keyboard([("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")])
            )
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Error in consultation: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=BaseHandler.create_keyboard([("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")])
            )
            return ConversationHandler.END

    @staticmethod
    async def cancel_consultation(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        await update.message.reply_text(
            "‚ùå –ó–∞–∫–∞–∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=BaseHandler.create_keyboard([("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")])
        )
        return ConversationHandler.END

class SubscriptionHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã"""
    
    SUBSCRIPTION_TYPES = {
        "monthly": (349, 30, "üíé –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"),
        "5": (99, 0, "üõí 5 –ø–æ–ø—ã—Ç–æ–∫"),
        "10": (149, 0, "üõí 10 –ø–æ–ø—ã—Ç–æ–∫"),
        "15": (229, 0, "üõí 15 –ø–æ–ø—ã—Ç–æ–∫")
    }

    @staticmethod
    async def notify_admin(user_id: int, username: str, sub_type: str, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –≤—ã–±–æ—Ä–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            sub_info = SubscriptionHandler.SUBSCRIPTION_TYPES.get(sub_type)
            if not sub_info:
                logger.error(f"Unknown subscription type: {sub_type}")
                return
                
            price, days, name = sub_info
            
            admin_text = (
                "üõí *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username if username else '–Ω–µ—Ç username'} (ID: {user_id})\n"
                f"üìù –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {name}\n"
                f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ\n"
                f"‚è≥ –°—Ä–æ–∫: {days if days > 0 else '—Ä–∞–∑–æ–≤—ã–µ'} –¥–Ω–µ–π\n\n"
                f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
            )
            
            await context.bot.send_message(
                chat_id=Config.ADMIN_CHAT_ID,
                text=admin_text,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"Error sending admin notification: {e}")

    @staticmethod
    async def show_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            query = update.callback_query
            await query.answer()
            
            user_id = query.from_user.id
            logger.info(f"User {user_id} opened subscriptions menu")
    
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
            try:
                attempts = await get_attempts(user_id)
                has_sub = bool(await get_active_subscription(user_id))
                logger.info(f"User data loaded - attempts: {attempts}, has_sub: {has_sub}")
            except Exception as db_error:
                logger.error(f"Database error for user {user_id}: {db_error}")
                raise
    
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            status = "–∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ" if has_sub else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå"
            text = (
                f"üíé <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b>: {status}\n"
                f"üÉè <b>–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫:</b>: {attempts if attempts is not None else 0}\n\n"
                "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n"
                "1.üíé <b>–ú–µ—Å—è—Ü –ø–æ–ª–Ω–æ–π —è—Å–Ω–æ—Å—Ç–∏</b> ‚Äî –≤—Å–µ —Ä–∞—Å–∫–ª–∞–¥—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∑–∞ 349‚ÇΩ\n"
                "2.üõí <b>–†–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã</b> ‚Äî –±–µ—Ä–∏ —Å—Ç–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ\n\n"

                "–†–µ—à–∞–π —Å–∞–º ‚Äî –≥–ª—É–±–æ–∫–æ –∏ –ø–æ –¥–µ–ª—É –∏–ª–∏ –ø–æ —á—É—Ç—å-—á—É—Ç—å, –Ω–æ –≤—Å–µ–≥–¥–∞ –ø–æ —Ñ–∞–∫—Ç–∞–º."
            )
    
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            buttons = [
                ("üíé –ú–µ—Å—è—á–Ω–∞—è (349‚ÇΩ)", "sub_monthly"),
                ("üõí 5 –ø–æ–ø—ã—Ç–æ–∫ (99‚ÇΩ)", "sub_5"),
                ("üõí 10 –ø–æ–ø—ã—Ç–æ–∫ (149‚ÇΩ)", "sub_10"),
                ("üõí 15 –ø–æ–ø—ã—Ç–æ–∫ (229‚ÇΩ)", "sub_15"),
                ("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")
            ]
    
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await query.edit_message_text(
                    text=text,
                    reply_markup=BaseHandler.create_keyboard(buttons),
                    parse_mode="HTML"
                )
                logger.info(f"Successfully updated menu for user {user_id}")
            except BadRequest as e:
                logger.warning(f"Message edit failed for user {user_id}, sending new: {e}")
                await context.bot.send_message(
                    chat_id=user_id,
                    text=text,
                    reply_markup=BaseHandler.create_keyboard(buttons),
                    parse_mode="HTML"
                )
    
        except Exception as e:
            logger.error(f"Critical error in show_subscriptions: {e}", exc_info=True)
            error_text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            try:
                await query.edit_message_text(text=error_text)
            except:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=error_text
                )

    @staticmethod
    async def handle_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            query = update.callback_query
            await query.answer()
            
            user = query.from_user
            sub_type = query.data.replace("sub_", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            sub_info = SubscriptionHandler.SUBSCRIPTION_TYPES.get(sub_type)
            if not sub_info:
                raise ValueError(f"Unknown subscription type: {sub_type}")
                
            price, days, name = sub_info
    
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text = (
                f"üìù <b>–í—ã –≤—ã–±—Ä–∞–ª–∏: {name}</b>\n\n"
                f"üí≥ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price}‚ÇΩ\n\n"
                f"–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @{Config.ADMIN_USERNAME}\n"
                "–∏ —É–∫–∞–∂–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç."
            )
    
            buttons = [
                ("üîô –ù–∞–∑–∞–¥", "subscription")
            ]
    
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await query.edit_message_text(
                text=text,
                reply_markup=BaseHandler.create_keyboard(buttons),
                parse_mode="HTML"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            await SubscriptionHandler.notify_admin(
                user_id=user.id,
                username=user.username,
                sub_type=sub_type,
                context=context
            )
    
        except Exception as e:
            logger.error(f"Error in handle_subscription: {e}", exc_info=True)
            error_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            try:
                await query.edit_message_text(text=error_text)
            except:
                await context.bot.send_message(
                    chat_id=query.from_user.id,
                    text=error_text
                )

class ReadingHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ"""
    
    @staticmethod
    async def daily_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ‚Äî –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–ø—ã—Ç–∫–∏
        if not await BaseHandler.check_access(user_id):
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.\n"
                     "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø–æ–ø—ã—Ç–∫–∏.",
                reply_markup=BaseHandler.create_keyboard([
                    ("üíé –ü–æ–¥–ø–∏—Å–∫–∞", "subscription"),
                    ("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")
                ])
            )
            return ConversationHandler.END

        # –°–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É (–¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —É—Ö–æ–¥–∞ –≤ –º–∏–Ω—É—Å)
        await update_attempts(user_id, -1)

        reading = await TarotInterpreter.generate_interpretation("–ß—Ç–æ –º–µ–Ω—è –∂–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è?", "", [])
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚ú® –í–∞—à –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å–∫–ª–∞–¥:\n\n{reading}"
        )
        return ConversationHandler.END

    @staticmethod
    async def weekly_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ‚Äî –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–ø—ã—Ç–∫–∏
        if not await BaseHandler.check_access(user_id):
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.\n"
                     "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø–æ–ø—ã—Ç–∫–∏.",
                reply_markup=BaseHandler.create_keyboard([
                    ("üíé –ü–æ–¥–ø–∏—Å–∫–∞", "subscription"),
                    ("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")
                ])
            )
            return ConversationHandler.END

        # –°–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É (–¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —É—Ö–æ–¥–∞ –≤ –º–∏–Ω—É—Å)
        await update_attempts(user_id, -1)

        reading = await TarotInterpreter.generate_interpretation("–ß—Ç–æ –º–µ–Ω—è –∂–¥–µ—Ç –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?", "", [])
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚ú® –í–∞—à –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥:\n\n{reading}"
        )
        return ConversationHandler.END

    @staticmethod
    async def begin_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å–∫–ª–∞–¥–∞"""
        query = update.callback_query
        await query.answer()
    
        if not await BaseHandler.check_access(query.from_user.id):
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text="‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.\n"
                     "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø–æ–ø—ã—Ç–∫–∏.",
                reply_markup=BaseHandler.create_keyboard([
                    ("üíé –ü–æ–¥–ø–∏—Å–∫–∞", "subscription"),
                    ("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")
                ])
            )
            return ConversationHandler.END
    
        context.user_data.clear()
        
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="üîÆ *–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —á—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É*\n\n"
                 "–ü—Ä–∏–º–µ—Ä: ¬´–ö–∞–∫–∏–µ —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –ø–æ–º–æ–≥—É—Ç –º–Ω–µ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è?¬ª\n"
                 "–ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º –ø–æ–ª–µ–∑–Ω–µ–µ –æ—Ç–≤–µ—Ç.\n\n",
            parse_mode="Markdown"
        )
        return QUESTION

    @staticmethod
    async def process_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if update.message.text.lower() == "–Ω–∞–∑–∞–¥":
            await StartHandler.start(update, context)
            return ConversationHandler.END
            
        context.user_data["question"] = update.message.text
            
        await update.message.reply_text(
            "üìñ *–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ*\n\n"
            "–≠—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ç–æ—á–Ω–µ–µ.\n"
            "–ü—Ä–∏–º–µ—Ä: ¬´–ú—ã –≤ —Å—Å–æ—Ä–µ —É–∂–µ 2 –Ω–µ–¥–µ–ª–∏, –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –ø–æ–º–∏—Ä–∏—Ç—å—Å—è¬ª",
            parse_mode="Markdown",
            reply_markup=BaseHandler.create_keyboard([("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", "back")])
        )
        return SITUATION

    @staticmethod
    async def process_situation(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏"""
        if update.message.text.lower() == "–Ω–∞–∑–∞–¥":
            await StartHandler.start(update, context)
            return ConversationHandler.END
            
        context.user_data["situation"] = update.message.text
            
        await update.message.reply_text(
            "üÉè *–°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã—Ç—è–Ω—É—Ç—å?*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5:",
            parse_mode="Markdown",
            reply_markup=BaseHandler.create_keyboard([("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", "back")])
        )
        return NUM_CARDS
    
    @staticmethod
    async def process_num_cards(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç"""
        if update.message.text.lower() == "–Ω–∞–∑–∞–¥":
            await StartHandler.start(update, context)
            return ConversationHandler.END
            
        try:
            num = int(update.message.text)
            if not 1 <= num <= 5:
                raise ValueError
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
            return NUM_CARDS
            
        context.user_data["num_cards"] = num
            
        buttons = [
            ("üé≤ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", "random_cards"),
            ("üÉè –ù–∞–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é", "manual_cards"),
            ("üëÅÔ∏è –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã", "pick_cards"),
            ("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")
        ]
            
        await update.message.reply_text(
            "üÉè *–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã?*",
            reply_markup=BaseHandler.create_keyboard(buttons),
            parse_mode="Markdown"
        )
        return CHOOSE_METHOD



    @staticmethod
    async def choose_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "random_cards":
            num = context.user_data["num_cards"]
            selected = random.sample(TAROT_DECK, num)
            context.user_data["selected_cards"] = selected
            
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text=f"‚ú® –í—ã–ø–∞–ª–∏ –∫–∞—Ä—Ç—ã: {', '.join(selected)}"
            )
            return await ReadingHandler.finish_reading(update, context)
            
        elif query.data == "manual_cards":
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
                     "–ü—Ä–∏–º–µ—Ä: –®—É—Ç, –ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞, –ü–æ–≤–µ—à–µ–Ω–Ω—ã–π"
            )
            return ENTER_CARDS

        elif query.data == "pick_cards":
            return await ReadingHandler.pick_cards_start(update, context)
            
        elif query.data == "back":
            return await BaseHandler.back_handler(update, context)

    @staticmethod
    async def pick_cards_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ä—Ç –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç –ø–æ —Ä—É–±–∞—à–∫–∞–º"""
        query = update.callback_query
        await query.answer()
        num_cards = context.user_data.get("num_cards", 1)
        # 6 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞
        deck = random.sample(TAROT_DECK, 6)
        context.user_data["pick_deck"] = deck
        context.user_data["picked_cards"] = []
    
        keyboard = [
            [InlineKeyboardButton(f"üÉè {i+1}", callback_data=f"pick_card_{i}")]
            for i in range(6)
        ]
        await context.bot.send_photo(
            chat_id=query.from_user.id,
            photo=CARDS_IMAGE,
            caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É ‚Ññ1 –∏–∑ {num_cards}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return PICK_CARDS

    @staticmethod
    async def pick_cards_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–∑ 6"""
        query = update.callback_query
        await query.answer()
        num_cards = context.user_data.get("num_cards", 1)
        deck = context.user_data["pick_deck"]
        picked = context.user_data["picked_cards"]
    
        idx = int(query.data.split("_")[-1])
        card = deck[idx]
        if card in picked:
            await query.answer("–≠—Ç—É –∫–∞—Ä—Ç—É –≤—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏!", show_alert=True)
            return PICK_CARDS
        picked.append(card)
    
        if len(picked) < num_cards:
            # –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏: —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ‚Äì –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
            keyboard = []
            for i, c in enumerate(deck):
                text = f"‚úÖ {i+1}" if c in picked else f"üÉè {i+1}"
                button = (
                    InlineKeyboardButton(text, callback_data="picked_ignore")
                    if c in picked else
                    InlineKeyboardButton(text, callback_data=f"pick_card_{i}")
                )
                keyboard.append([button])
            await query.edit_message_caption(
                caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É ‚Ññ{len(picked)+1} –∏–∑ {num_cards}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return PICK_CARDS
        else:
            context.user_data["selected_cards"] = picked
            await query.edit_message_caption(
                caption=f"‚ú® –í—ã –≤—ã–±—Ä–∞–ª–∏: {', '.join(picked)}"
            )
            return await ReadingHandler.finish_reading(update, context)

    @staticmethod
    async def process_manual_cards(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç"""
        if update.message.text.lower() == "–Ω–∞–∑–∞–¥":
            await StartHandler.start(update, context)
            return ConversationHandler.END
            
        input_cards = [c.strip() for c in update.message.text.split(",")]
        valid_cards = []
        invalid = []
            
        for card in input_cards:
            if card in TAROT_DECK:
                valid_cards.append(card)
            else:
                invalid.append(card)
                    
        if invalid:
            await update.message.reply_text(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã: {', '.join(invalid)}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return ENTER_CARDS
                
        context.user_data["selected_cards"] = valid_cards
        return await ReadingHandler.finish_reading(update, context)

    @staticmethod
    async def finish_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞ –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        user_id = update.effective_user.id
        question = context.user_data.get("question", "")
        situation = context.user_data.get("situation", "")
        cards = context.user_data.get("selected_cards", [])
        
        if not cards:
            logger.error("No cards selected")
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç"
            )
            return ConversationHandler.END
        
        try:
            processing_msg = await context.bot.send_message(
                chat_id=user_id,
                text="üîÆ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—é –∫–∞—Ä—Ç—ã..."
            )
            
            interpretation = await asyncio.wait_for(
                TarotInterpreter.generate_interpretation(question, situation, cards),
                timeout=30
            )
            
            if not interpretation:
                raise ValueError("Empty interpretation received")
            
            await save_reading(user_id, question, situation, cards, interpretation)
            await update_attempts(user_id, -1)
            
            result = (
                f"‚ú® *–í–∞—à —Ä–∞—Å–∫–ª–∞–¥*\n\n"
                f"‚ùì –í–æ–ø—Ä–æ—Å: {question}\n"
                f"üÉè –ö–∞—Ä—Ç—ã: {', '.join(cards)}\n\n"
                f"üìñ *–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:*\n{interpretation}\n\n"
                f"üíé –•–æ—Ç–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä? –ó–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!"
            )
            
            buttons = [
                ("üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "consultation"),
                ("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥", "request_reading"),
                ("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")
            ]
            
            await processing_msg.delete()
            await context.bot.send_message(
                chat_id=user_id,
                text=result,
                reply_markup=BaseHandler.create_keyboard(buttons),
                parse_mode="Markdown"
            )
            
        except asyncio.TimeoutError:
            logger.error("Timeout generating interpretation")
            await context.bot.send_message(
                chat_id=user_id,
                text="‚è≥ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as e:
            logger.error(f"Error in finish_reading: {str(e)}")
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        return ConversationHandler.END

    @staticmethod
    async def cancel_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å–∫–ª–∞–¥–∞"""
        context.user_data.clear()
        await update.message.reply_text(
            "‚ùå –†–∞—Å–∫–ª–∞–¥ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=BaseHandler.create_keyboard([("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")])
        )
        return ConversationHandler.END

    @staticmethod
    async def process_manual_cards(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –Ω–µ—á–µ—Ç–∫–∏–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º"""
        if update.message.text.lower() == "–Ω–∞–∑–∞–¥":
            await StartHandler.start(update, context)
            return ConversationHandler.END
    
        num_needed = context.user_data.get("num_cards", 1)
        input_cards = [c.strip() for c in update.message.text.split(",")]
        valid_cards = []
        invalid = []
    
        for card in input_cards:
            matched, found = match_card_name(card, TAROT_DECK)
            if found:
                valid_cards.append(matched)
            else:
                invalid.append(card)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
        n_valid = len(valid_cards)
        if n_valid != num_needed or invalid:
            lines = []
            if n_valid < num_needed:
                lines.append(f"‚ùóÔ∏è –í—ã –≤–≤–µ–ª–∏ {n_valid} –∫–∞—Ä—Ç—ã, –∞ –Ω—É–∂–Ω–æ {num_needed}.")
                if n_valid > 0:
                    lines.append(f"‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ –∫–∞—Ä—Ç—ã: {', '.join(valid_cards)}")
            elif n_valid > num_needed:
                lines.append(f"‚ùóÔ∏è –í—ã –≤–≤–µ–ª–∏ {n_valid} –∫–∞—Ä—Ç, –∞ –Ω—É–∂–Ω–æ {num_needed}.")
                lines.append(f"‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ –∫–∞—Ä—Ç—ã: {', '.join(valid_cards[:num_needed])}")
    
            if invalid:
                lines.append(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã: {', '.join(invalid)}")
    
            lines.append(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ {num_needed} –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
            await update.message.reply_text("\n".join(lines))
            return ENTER_CARDS
    
        context.user_data["selected_cards"] = valid_cards
        return await ReadingHandler.finish_reading(update, context)

class ReferralHandler(BaseHandler):
    @staticmethod
    async def invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        username = update.effective_user.username
        bot_username = context.bot.username

        referral_link = f"https://t.me/{bot_username}?start={user_id}"

        count = await execute_query(
            "SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,), fetch_one=True
        )
        count = count[0] if count else 0

        bonuses = count

        share_buttons = [
            [
                InlineKeyboardButton("üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=f"https://t.me/share/url?url={referral_link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É –¢–∞—Ä–æ ‚Äî –ø–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–ø—ã—Ç–∫—É!")
            ],
            [InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start_over")]
        ]

        text = (
            f"üë´ <b>–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
            f"<code>{referral_link}</code>\n\n"
            f"üéÅ –ë–æ–Ω—É—Å–æ–≤ –Ω–∞ —Å—á–µ—Ç—É: <b>{bonuses}</b>\n\n"
            "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ ‚Äî +1 –ø–æ–ø—ã—Ç–∫–∞ –∫ —Ç–≤–æ–∏–º —Ä–∞—Å–∫–ª–∞–¥–∞–º! –ü—Ä–æ—Å—Ç–æ –ø–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π: –±—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ, –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏. –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤–∞–∂–Ω–æ–µ."
        )
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text=text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(share_buttons)
        )


class AdminHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    @staticmethod
    async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = str(update.effective_user.id)
        admin_id = str(Config.ADMIN_CHAT_ID)
    
        buttons = [
            ("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "admin_users"),
            ("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "admin_analytics"),
            ("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "admin_broadcast"),
            ("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")
        ]
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å
        if hasattr(update, "message") and update.message:
            if user_id != admin_id:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            await update.message.reply_text(
                "‚öôÔ∏è *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*",
                reply_markup=BaseHandler.create_keyboard(buttons),
                parse_mode="Markdown"
            )
        elif hasattr(update, "callback_query") and update.callback_query:
            if user_id != admin_id:
                await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
                return
            await update.callback_query.edit_message_text(
                "‚öôÔ∏è *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*",
                reply_markup=BaseHandler.create_keyboard(buttons),
                parse_mode="Markdown"
            )
        else:
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–ø–¥–µ–π—Ç–∞
            logger.warning("admin_menu: Unknown update type")


    @staticmethod
    async def admin_broadcast_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é. –ú–æ–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
            reply_markup=BaseHandler.create_keyboard([("üîô –ù–∞–∑–∞–¥", "start_over")])
        )
        return "ADMIN_BROADCAST"

    @staticmethod
    async def process_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
        import asyncio
        from telegram.error import RetryAfter
    
        text = update.message.text or (update.message.caption if update.message.caption else "")
        photo = update.message.photo[-1].file_id if update.message.photo else None
        users = await execute_query("SELECT telegram_id FROM users")
        errors = 0
        sent = 0
    
        for idx, (user_id,) in enumerate(users):
            try:
                if photo:
                    await context.bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption=text if text else None
                    )
                else:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=text
                    )
                sent += 1
            except RetryAfter as e:
                logger.warning(f"FloodWait: —Å–ø–ª—é {e.retry_after} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(e.retry_after)
                continue
            except Exception as e:
                errors += 1
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
            await asyncio.sleep(1.2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–£—Å–ø–µ—à–Ω–æ: {sent}\n"
            f"–û—à–∏–±–æ–∫: {errors}",
            reply_markup=BaseHandler.create_keyboard([("üîô –í –º–µ–Ω—é", "start_over")])
        )
        return ConversationHandler.END

    @staticmethod
    async def admin_users_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        query = update.callback_query
        await query.answer()
        
        buttons = [
            ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏", "admin_add_attempts"),
            ("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏", "admin_remove_attempts"),
            ("üíé –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "admin_add_sub"),
            ("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "admin_list_users"),
            ("üîô –ù–∞–∑–∞–¥", "start_over")
        ]
        
        await query.edit_message_text(
            "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*",
            reply_markup=BaseHandler.create_keyboard(buttons, columns=2),
            parse_mode="Markdown"
        )

    @staticmethod
    async def admin_request_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        action = query.data.replace("admin_", "")
        context.user_data["admin_action"] = action
        
        await query.edit_message_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=BaseHandler.create_keyboard([("üîô –ù–∞–∑–∞–¥", "admin_users")])
        )
        return "ADMIN_GET_USER_ID"

    @staticmethod
    async def admin_get_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = int(update.message.text)
            context.user_data["admin_user_id"] = user_id
            
            action = context.user_data["admin_action"]
            
            if action in ["add_attempts", "remove_attempts"]:
                await update.message.reply_text(
                    "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:",
                    reply_markup=BaseHandler.create_keyboard([("üîô –ù–∞–∑–∞–¥", "admin_users")])
                )
                return "ADMIN_GET_ATTEMPTS"
            elif action == "add_sub":
                buttons = [
                    ("üíé –ú–µ—Å—è—á–Ω–∞—è (30 –¥–Ω–µ–π)", "admin_sub_monthly"),
                    ("üîô –ù–∞–∑–∞–¥", "admin_users")
                ]
                await update.message.reply_text(
                    "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:",
                    reply_markup=BaseHandler.create_keyboard(buttons)
                )
                return "ADMIN_GET_SUB_TYPE"

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return "ADMIN_GET_USER_ID"

    @staticmethod
    async def admin_get_attempts(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫"""
        try:
            attempts = int(update.message.text)
            user_id = context.user_data["admin_user_id"]
            action = context.user_data["admin_action"]
            
            if action == "add_attempts":
                await update_attempts(user_id, attempts)
                msg = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {attempts} –ø–æ–ø—ã—Ç–æ–∫"
            else:
                await update_attempts(user_id, -attempts)
                msg = f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–ø–∏—Å–∞–Ω–æ {attempts} –ø–æ–ø—ã—Ç–æ–∫"
                
            await update.message.reply_text(
                msg,
                reply_markup=BaseHandler.create_keyboard([("üîô –í –º–µ–Ω—é", "admin_users")])
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return "ADMIN_GET_ATTEMPTS"
            
        return ConversationHandler.END

    @staticmethod
    async def admin_add_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        sub_type = query.data.replace("admin_sub_", "")
        user_id = context.user_data["admin_user_id"]
        
        if sub_type == "monthly":
            await add_subscription(user_id, "premium", 30)
            msg = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
        else:
            msg = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏"
            
        await query.edit_message_text(
            msg,
            reply_markup=BaseHandler.create_keyboard([("üîô –í –º–µ–Ω—é", "admin_users")])
        )
        return ConversationHandler.END

    @staticmethod
    async def admin_list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–ø—ã—Ç–∫–∞—Ö"""
        query = update.callback_query
        await query.answer()
        
        try:
            users = await execute_query("""
                SELECT 
                    u.telegram_id, 
                    u.username, 
                    COALESCE(a.remaining, 0) as attempts,
                    MAX(s.end_date) as sub_end
                FROM users u
                LEFT JOIN attempts a ON u.telegram_id = a.user_id
                LEFT JOIN subscriptions s ON u.telegram_id = s.user_id AND s.end_date > datetime('now')
                GROUP BY u.telegram_id
                ORDER BY u.created_at DESC
                LIMIT 50
            """)
            
            if not users:
                text = "üìÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞"
            else:
                text = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
                for user in users:
                    user_id, username, attempts, sub_end = user
                    sub_status = "‚úÖ" if sub_end else "‚ùå"
                    username_display = f"@{username}" if username else "–Ω–µ—Ç username"
                    
                    text += (
                        f"üÜî {user_id} | üë§ {username_display}\n"
                        f"üÉè –ü–æ–ø—ã—Ç–æ–∫: {attempts} | –ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}\n"
                        f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
                    )
            
            await query.edit_message_text(
                text=text,
                reply_markup=BaseHandler.create_keyboard([("üîô –ù–∞–∑–∞–¥", "admin_users")]),
                parse_mode=None
            )
        except Exception as e:
            logger.error(f"Error in admin_list_users: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                reply_markup=BaseHandler.create_keyboard([("üîô –ù–∞–∑–∞–¥", "admin_users")])
            )

    @staticmethod
    async def forward_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
            reply_markup=BaseHandler.create_keyboard([("üîô –ù–∞–∑–∞–¥", "back")])
        )
        return ASK_QUESTION

    @staticmethod
    async def process_admin_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if update.message.text.lower() == "–Ω–∞–∑–∞–¥":
            await StartHandler.start(update, context)
            return ConversationHandler.END
            
        user = update.effective_user
        question = update.message.text
            
        await context.bot.send_message(
            chat_id=Config.ADMIN_CHAT_ID,
            text=f"üì® –í–æ–ø—Ä–æ—Å –æ—Ç @{user.username} (ID: {user.id}):\n\n{question}"
        )
            
        await update.message.reply_text(
            "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=BaseHandler.create_keyboard([("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "start_over")])
        )
        return ConversationHandler.END

    @staticmethod
    async def admin_analytics(update, context):
        """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        query = getattr(update, "callback_query", None)
        if query:
            await query.answer()
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await execute_query("""
                SELECT
                    (SELECT COUNT(*) FROM users),                               -- –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    (SELECT COUNT(*) FROM readings),                            -- –≤—Å–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
                    (SELECT COUNT(*) FROM subscriptions WHERE end_date > datetime('now')),  -- –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
                    (SELECT SUM(remaining) FROM attempts),                      -- –≤—Å–µ–≥–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫
                    (SELECT COUNT(*) FROM readings WHERE created_at >= datetime('now', '-1 day')),   -- —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –∑–∞ —Å—É—Ç–∫–∏
                    (SELECT COUNT(*) FROM readings WHERE created_at >= datetime('now', '-7 day'))    -- –∑–∞ –Ω–µ–¥–µ–ª—é
            """)
            (
                total_users,
                total_readings,
                active_subs,
                total_attempts,
                readings_day,
                readings_week
            ) = stats[0]
    
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = (
                "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
                f"üÉè –í—Å–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤: <b>{total_readings}</b>\n"
                f"üìÖ –ó–∞ 24—á: <b>{readings_day}</b>\n"
                f"üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é: <b>{readings_week}</b>\n"
                f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>{active_subs}</b>\n"
                f"üßÆ –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫: <b>{total_attempts}</b>\n"
            )
            if query:
                await query.edit_message_text(
                    text=text,
                    parse_mode="HTML",
                    reply_markup=BaseHandler.create_keyboard([("üîô –ù–∞–∑–∞–¥", "start_over")])
                )
            else:
                await update.message.reply_text(
                    text,
                    parse_mode="HTML",
                    reply_markup=BaseHandler.create_keyboard([("üîô –ù–∞–∑–∞–¥", "start_over")])
                )
        except Exception as e:
            logger.error(f"Error in admin_analytics: {e}")
            err_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
            if query:
                await query.edit_message_text(
                    err_text,
                    reply_markup=BaseHandler.create_keyboard([("üîô –ù–∞–∑–∞–¥", "start_over")])
                )
            else:
                await update.message.reply_text(
                    err_text,
                    reply_markup=BaseHandler.create_keyboard([("üîô –ù–∞–∑–∞–¥", "start_over")])
                )
    
    