import aiosqlite
from pathlib import Path
from config import Config
import logging
from typing import Optional
from datetime import datetime, timedelta, timezone

logger = logging.getLogger(__name__)

def _utcnow_str() -> str:
    return datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    Path(Config.DB_PATH.parent).mkdir(exist_ok=True)
    
    async with aiosqlite.connect(Config.DB_PATH) as conn:
        await conn.executescript('''
        CREATE TABLE IF NOT EXISTS users (
            telegram_id INTEGER PRIMARY KEY NOT NULL,
            username TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS subscriptions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            type TEXT NOT NULL,
            start_date TIMESTAMP NOT NULL,
            end_date TIMESTAMP NOT NULL,
            FOREIGN KEY(user_id) REFERENCES users(telegram_id)
        );
        
        CREATE TABLE IF NOT EXISTS attempts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            remaining INTEGER NOT NULL DEFAULT 0,
            last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(user_id) REFERENCES users(telegram_id)
        );
        
        CREATE TABLE IF NOT EXISTS readings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            question TEXT,
            situation TEXT,
            cards TEXT NOT NULL,
            interpretation TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(user_id) REFERENCES users(telegram_id)
        );
        ''')
        try:
            cur = await conn.execute("PRAGMA table_info(users)")
            cols = [row[1] for row in await cur.fetchall()]
            if "referrer_id" not in cols:
                await conn.execute("ALTER TABLE users ADD COLUMN referrer_id INTEGER")
                await conn.commit()
        except Exception as e:
            logger.warning(f"Schema check/migration failed: {e}")
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_subscriptions_user_end ON subscriptions(user_id, end_date)")
        await conn.commit()

async def execute_query(query: str, params: tuple = (), fetch_one: bool = False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        async with aiosqlite.connect(Config.DB_PATH) as conn:
            cursor = await conn.execute(query, params)
            await conn.commit()
            return await cursor.fetchone() if fetch_one else await cursor.fetchall()
    except Exception as e:
        logger.error(f"Database error: {e}")
        raise

async def add_user(telegram_id: int, username: str = None, referrer_id: Optional[int] = None, context=None):
    user = await get_user(telegram_id)
    if not user:
        # –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
        await execute_query(
            "INSERT INTO users (telegram_id, username, referrer_id) VALUES (?, ?, ?)",
            (telegram_id, username, referrer_id)
        )
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª—É—á–∞–µ—Ç 5 –ø–æ–ø—ã—Ç–æ–∫
        await execute_query(
            "INSERT OR IGNORE INTO attempts (user_id, remaining) VALUES (?, ?)",
            (telegram_id, 5)
        )
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª –∏ –Ω–µ —Å–∞–º —Å–µ–±–µ, –Ω–∞—á–∏—Å–ª—è–µ–º –ø–æ 1 –±–æ–Ω—É—Å—É –æ–±–æ–∏–º
        if referrer_id and referrer_id != telegram_id:
            await update_attempts(referrer_id, 1)
            await update_attempts(telegram_id, 1)  # <-- –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç +1
            # –°–æ–æ–±—â–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—é
            if context:
                try:
                    await context.bot.send_message(
                        chat_id=referrer_id,
                        text=f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è @{username or telegram_id}! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ 1 –ø–æ–ø—ã—Ç–∫–∞."
                    )
                except Exception:
                    pass
            # –°–æ–æ–±—â–∞–µ–º –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if context:
                try:
                    await context.bot.send_message(
                        chat_id=telegram_id,
                        text=f"üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–ø—ã—Ç–∫—É."
                    )
                except Exception:
                    pass
    else:
        await execute_query(
            "UPDATE users SET username = ? WHERE telegram_id = ?",
            (username, telegram_id)
        )

async def get_user(telegram_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return await execute_query(
        "SELECT * FROM users WHERE telegram_id = ?", 
        (telegram_id,), 
        fetch_one=True
    )

async def get_attempts(telegram_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        async with aiosqlite.connect(Config.DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT remaining FROM attempts WHERE user_id = ?",
                (telegram_id,)
            )
            result = await cursor.fetchone()
            return result[0] if result else 0
    except Exception as e:
        logger.error(f"Error getting attempts for {telegram_id}: {e}")
        return None

async def get_active_subscription(telegram_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        async with aiosqlite.connect(Config.DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT * FROM subscriptions WHERE user_id = ? AND end_date > datetime('now')",
                (telegram_id,)
            )
            return await cursor.fetchone()
    except Exception as e:
        logger.error(f"Error getting subscription for {telegram_id}: {e}")
        return None

async def update_attempts(telegram_id: int, change: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ"""
    async with aiosqlite.connect(Config.DB_PATH) as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        has_sub = await conn.execute(
            "SELECT 1 FROM subscriptions WHERE user_id = ? AND end_date > datetime('now')",
            (telegram_id,)
        )
        has_sub = await has_sub.fetchone()

        if has_sub and change < 0:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞, –Ω–µ –¥–∞–µ–º —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å
            await conn.execute(
                "UPDATE attempts SET remaining = MAX(remaining + ?, 0) WHERE user_id = ?",
                (change, telegram_id)
            )
        else:
            # –ò–Ω–∞—á–µ –æ–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await conn.execute(
                "UPDATE attempts SET remaining = remaining + ? WHERE user_id = ?",
                (change, telegram_id)
            )
        await conn.commit()


async def add_subscription(telegram_id: int, sub_type: str, duration_days: int):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (UTC-—Ç–∞–π–º—Å—Ç–µ–º–ø—ã)"""
    start_dt = datetime.now(timezone.utc)
    end_dt = start_dt + timedelta(days=duration_days)
    start = start_dt.strftime("%Y-%m-%d %H:%M:%S")
    end = end_dt.strftime("%Y-%m-%d %H:%M:%S")
    await execute_query(
        "INSERT INTO subscriptions (user_id, type, start_date, end_date) VALUES (?, ?, ?, ?)",
        (telegram_id, sub_type, start, end)
    )

async def cancel_subscription(user_id: int) -> int:
    """–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(Config.DB_PATH) as conn:
        cursor = await conn.execute(
            """
            UPDATE subscriptions
               SET end_date = datetime('now')
             WHERE user_id = ?
               AND end_date > datetime('now')
            """,
            (user_id,)
        )
        await conn.commit()
        return cursor.rowcount

async def save_reading(telegram_id: int, question: str, situation: str, cards: list, interpretation: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞"""
    await execute_query(
        "INSERT INTO readings (user_id, question, situation, cards, interpretation) VALUES (?, ?, ?, ?, ?)",
        (telegram_id, question, situation, ",".join(cards), interpretation)
    )

