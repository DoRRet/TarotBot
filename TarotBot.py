import os
import random
import asyncio
from telegram import InputFile
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.error import TimedOut
from datetime import datetime, timedelta  
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
)
from dotenv import load_dotenv
from tarot_interpreter import generate_tarot_interpretation
from database import (
    add_user, get_user, update_free_attempts, save_tarot_reading,
    activate_subscription, get_subscription_status
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")  # Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
CHOOSE_METHOD, QUESTION, SITUATION, NUM_CARDS, ENTER_CARDS, ASK_QUESTION = range(6)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–¥—ã –¢–∞—Ä–æ
tarot_deck = [
    # –°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã (22 –∫–∞—Ä—Ç—ã)
    "–®—É—Ç", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", 
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫", 
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", 
    "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", 
    "–°—É–¥", "–ú–∏—Ä",
    # –ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã: –ñ–µ–∑–ª—ã (14 –∫–∞—Ä—Ç)
    "–¢—É–∑ –ñ–µ–∑–ª–æ–≤", "–î–≤–æ–π–∫–∞ –ñ–µ–∑–ª–æ–≤", "–¢—Ä–æ–π–∫–∞ –ñ–µ–∑–ª–æ–≤", "–ß–µ—Ç–≤–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", 
    "–ü—è—Ç–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–®–µ—Å—Ç–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–°–µ–º–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–í–æ—Å—å–º–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", 
    "–î–µ–≤—è—Ç–∫–∞ –ñ–µ–∑–ª–æ–≤", "–î–µ—Å—è—Ç–∫–∞ –ñ–µ–∑–ª–æ–≤", "–ü–∞–∂ –ñ–µ–∑–ª–æ–≤", "–†—ã—Ü–∞—Ä—å –ñ–µ–∑–ª–æ–≤", 
    "–ö–æ—Ä–æ–ª–µ–≤–∞ –ñ–µ–∑–ª–æ–≤", "–ö–æ—Ä–æ–ª—å –ñ–µ–∑–ª–æ–≤",
    # –ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã: –ö—É–±–∫–∏ (14 –∫–∞—Ä—Ç)
    "–¢—É–∑ –ö—É–±–∫–æ–≤", "–î–≤–æ–π–∫–∞ –ö—É–±–∫–æ–≤", "–¢—Ä–æ–π–∫–∞ –ö—É–±–∫–æ–≤", "–ß–µ—Ç–≤–µ—Ä–∫–∞ –ö—É–±–∫–æ–≤", 
    "–ü—è—Ç–µ—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–®–µ—Å—Ç–µ—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–°–µ–º–µ—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–í–æ—Å—å–º–µ—Ä–∫–∞ –ö—É–±–∫–æ–≤", 
    "–î–µ–≤—è—Ç–∫–∞ –ö—É–±–∫–æ–≤", "–î–µ—Å—è—Ç–∫–∞ –ö—É–±–∫–æ–≤", "–ü–∞–∂ –ö—É–±–∫–æ–≤", "–†—ã—Ü–∞—Ä—å –ö—É–±–∫–æ–≤", 
    "–ö–æ—Ä–æ–ª–µ–≤–∞ –ö—É–±–∫–æ–≤", "–ö–æ—Ä–æ–ª—å –ö—É–±–∫–æ–≤",
    # –ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã: –ú–µ—á–∏ (14 –∫–∞—Ä—Ç)
    "–¢—É–∑ –ú–µ—á–µ–π", "–î–≤–æ–π–∫–∞ –ú–µ—á–µ–π", "–¢—Ä–æ–π–∫–∞ –ú–µ—á–µ–π", "–ß–µ—Ç–≤–µ—Ä–∫–∞ –ú–µ—á–µ–π", 
    "–ü—è—Ç–µ—Ä–∫–∞ –ú–µ—á–µ–π", "–®–µ—Å—Ç–µ—Ä–∫–∞ –ú–µ—á–µ–π", "–°–µ–º–µ—Ä–∫–∞ –ú–µ—á–µ–π", "–í–æ—Å—å–º–µ—Ä–∫–∞ –ú–µ—á–µ–π", 
    "–î–µ–≤—è—Ç–∫–∞ –ú–µ—á–µ–π", "–î–µ—Å—è—Ç–∫–∞ –ú–µ—á–µ–π", "–ü–∞–∂ –ú–µ—á–µ–π", "–†—ã—Ü–∞—Ä—å –ú–µ—á–µ–π", 
    "–ö–æ—Ä–æ–ª–µ–≤–∞ –ú–µ—á–µ–π", "–ö–æ—Ä–æ–ª—å –ú–µ—á–µ–π",
    # –ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã: –ü–µ–Ω—Ç–∞–∫–ª–∏ (14 –∫–∞—Ä—Ç)
    "–¢—É–∑ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–î–≤–æ–π–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–¢—Ä–æ–π–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ß–µ—Ç–≤–µ—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", 
    "–ü—è—Ç–µ—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–®–µ—Å—Ç–µ—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–°–µ–º–µ—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–í–æ—Å—å–º–µ—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", 
    "–î–µ–≤—è—Ç–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–î–µ—Å—è—Ç–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ü–∞–∂ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–†—ã—Ü–∞—Ä—å –ü–µ–Ω—Ç–∞–∫–ª–µ–π", 
    "–ö–æ—Ä–æ–ª–µ–≤–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ö–æ—Ä–æ–ª—å –ü–µ–Ω—Ç–∞–∫–ª–µ–π"
]

bot = Application.builder().token(TELEGRAM_TOKEN).read_timeout(30).write_timeout(30).build()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
def check_free_attempts(telegram_id: int) -> int:
    user = get_user(telegram_id)
    if user is None:
        print(f"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return 0
    return user[3]

def decrease_attempts(telegram_id: int) -> bool:
    user = get_user(telegram_id)
    if user is None:
        return False
    if get_subscription_status(telegram_id) == "active":
        return True  
    attempts = user[3]
    if attempts > 0:
        update_free_attempts(telegram_id, attempts - 1)
        return True
    return False

WELCOME_IMAGE_URL = "https://postimg.cc/SXqjBSWY"

async def start(update: Update, context: CallbackContext) -> None:
    try:
        telegram_id = update.message.from_user.id
        username = update.message.from_user.username
        add_user(telegram_id, username)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        await update.message.reply_photo(
            photo=WELCOME_IMAGE_URL,
            caption="üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¢–∞—Ä–æ!* üåü\n\n"
                    "–Ø ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç-—Ç–∞—Ä–æ–ª–æ–≥, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. "
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
            parse_mode="Markdown"
        )

        keyboard = [
            [InlineKeyboardButton("üÉè –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥", callback_data="request_reading")],
            [InlineKeyboardButton("üíº –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")],
            [InlineKeyboardButton("üìú –ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç", callback_data="card_meanings")],
            [InlineKeyboardButton("üìñ –†–∞—Å–∫–ª–∞–¥—ã", callback_data="spreads")],
            [InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="order_from_admin")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    except TimedOut:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "request_reading":
        telegram_id = query.from_user.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ø—ã—Ç–∫–∏
        attempts = check_free_attempts(telegram_id)
        if attempts <= 0:
            await query.edit_message_text(
                "‚ùå *–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.*\n\n"
                "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                parse_mode="Markdown"
            )
            return ConversationHandler.END
        await query.edit_message_text(
            "üîÆ <b>–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.</b>\n\n"
            "–ß–µ–º —Ç–æ—á–Ω–µ–µ –≤—ã —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç. "
            "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ß—Ç–æ –º–µ–Ω—è –∂–¥–µ—Ç –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –º–µ—Å—è—Ü–∞?¬ª",
            parse_mode="HTML"
        )
        return QUESTION
    elif query.data == "subscription":
        await subscription_handler(update, context)
    elif query.data == "card_meanings":
        await query.edit_message_text(
            "üìö <b>–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç –¢–∞—Ä–æ</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.",
            parse_mode="HTML"
        )
    elif query.data == "spreads":
        await query.edit_message_text(
            "üìú <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã</b>\n\n"
            "1. –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å.\n"
            "2. –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.\n"
            "3. –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –∫–∞—Ä—å–µ—Ä—É.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            parse_mode="HTML"
        )
    elif query.data == "order_from_admin":
        await query.edit_message_text(
            "üìù <b>–ó–∞–∫–∞–∑ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. "
            "–ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞: ¬´–ú–Ω–µ –Ω—É–∂–µ–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.¬ª",
            parse_mode="HTML"
        )
        return ASK_QUESTION
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

async def subscription_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    user = get_user(query.from_user.id)
    free_attempts = user[3] if user else 0
    subscription_status = get_subscription_status(query.from_user.id)

    keyboard = [
        [InlineKeyboardButton("üíé –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="monthly_subscription")],
        [InlineKeyboardButton("üõí –†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ (5 –ø–æ–ø—ã—Ç–æ–∫)", callback_data="one_time_purchase_5")],
        [InlineKeyboardButton("üõí –†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ (10 –ø–æ–ø—ã—Ç–æ–∫)", callback_data="one_time_purchase_10")],
        [InlineKeyboardButton("üõí –†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ (15 –ø–æ–ø—ã—Ç–æ–∫)", callback_data="one_time_purchase_15")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start_over")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    subscription_text = (
        f"üíé *–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –∏ —Ä–∞–∑–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏*\n\n"
        f"1. üíé *–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:*\n"
        f"   - –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤.\n"
        f"   - –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ä–∞—Å–∫–ª–∞–¥–∞–º.\n"
        f"   - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        f"   - –°—Ç–æ–∏–º–æ—Å—Ç—å: *349‚ÇΩ/–º–µ—Å—è—Ü*.\n\n"
        f"2. üõí *–†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞:*\n"
        f"   - –ü–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞—Å–∫–ª–∞–¥–æ–≤.\n"
        f"   - –°—Ç–æ–∏–º–æ—Å—Ç—å: 5 –ø–æ–ø—ã—Ç–æ–∫ - *99‚ÇΩ*, 10 –ø–æ–ø—ã—Ç–æ–∫ - *149‚ÇΩ*, 15 –ø–æ–ø—ã—Ç–æ–∫ - *229‚ÇΩ*.\n\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <b>{subscription_status}</b>\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{free_attempts}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    )
    await query.edit_message_text(subscription_text, reply_markup=reply_markup, parse_mode="HTML")

async def monthly_subscription_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay_monthly_subscription")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üíé *–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞*\n\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤.\n"
        "‚úÖ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ä–∞—Å–∫–ª–∞–¥–∞–º.\n"
        "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: *349‚ÇΩ/–º–µ—Å—è—Ü*.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ *¬´–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª* –¥–ª—è –æ–ø–ª–∞—Ç—ã.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def one_time_purchase_5_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 5 –ø–æ–ø—ã—Ç–æ–∫", callback_data="pay_one_time_purchase_5")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üõí *–†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ (5 –ø–æ–ø—ã—Ç–æ–∫)*\n\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "‚úÖ 5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞—Å–∫–ª–∞–¥–æ–≤.\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: *99‚ÇΩ*.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ *¬´–û–ø–ª–∞—Ç–∏—Ç—å 5 –ø–æ–ø—ã—Ç–æ–∫¬ª* –¥–ª—è –æ–ø–ª–∞—Ç—ã.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def one_time_purchase_10_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 10 –ø–æ–ø—ã—Ç–æ–∫", callback_data="pay_one_time_purchase_10")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üõí *–†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ (10 –ø–æ–ø—ã—Ç–æ–∫)*\n\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "‚úÖ 10 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞—Å–∫–ª–∞–¥–æ–≤.\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: *149‚ÇΩ*.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ *¬´–û–ø–ª–∞—Ç–∏—Ç—å 10 –ø–æ–ø—ã—Ç–æ–∫¬ª* –¥–ª—è –æ–ø–ª–∞—Ç—ã.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def one_time_purchase_15_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 15 –ø–æ–ø—ã—Ç–æ–∫", callback_data="pay_one_time_purchase_15")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üõí *–†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ (15 –ø–æ–ø—ã—Ç–æ–∫)*\n\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "‚úÖ 15 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞—Å–∫–ª–∞–¥–æ–≤.\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: *229‚ÇΩ*.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ *¬´–û–ø–ª–∞—Ç–∏—Ç—å 15 –ø–æ–ø—ã—Ç–æ–∫¬ª* –¥–ª—è –æ–ø–ª–∞—Ç—ã.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def send_admin_contacts(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    admin_contacts = (
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
        f"- Telegram: {ADMIN_USERNAME}\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∏ –æ–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å –æ–ø–ª–∞—Ç–æ–π."
    )

    await query.edit_message_text(admin_contacts, parse_mode="HTML")

async def pay_monthly_subscription_handler(update: Update, context: CallbackContext) -> None:
    await send_admin_contacts(update, context)

async def pay_one_time_purchase_5_handler(update: Update, context: CallbackContext) -> None:
    await send_admin_contacts(update, context)

async def pay_one_time_purchase_10_handler(update: Update, context: CallbackContext) -> None:
    await send_admin_contacts(update, context)

async def pay_one_time_purchase_15_handler(update: Update, context: CallbackContext) -> None:
    await send_admin_contacts(update, context)

async def start_over_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await start(query, context)

async def tarot_reading(update: Update, context: CallbackContext) -> int:
    if update.message:
        telegram_id = update.message.from_user.id
        response_target = update.message
    elif update.callback_query and update.callback_query.message:
        telegram_id = update.callback_query.from_user.id
        response_target = update.callback_query.message
    else:
        return ConversationHandler.END

    await response_target.reply_text(
        "üîÆ *–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.*\n\n"
        "–ß–µ–º —Ç–æ—á–Ω–µ–µ –≤—ã —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç. "
        "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ß—Ç–æ –º–µ–Ω—è –∂–¥–µ—Ç –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –º–µ—Å—è—Ü–∞?¬ª",
        parse_mode="Markdown"
    )
    return QUESTION

async def question_handler(update: Update, context: CallbackContext) -> int:
    context.user_data["previous_state"] = QUESTION  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data["question"] = update.message.text
    await update.message.reply_text(
        "üìñ *–û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é.*\n\n"
        "–≠—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π. "
        "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ú—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –≤ —Å—Å–æ—Ä–µ —É–∂–µ –º–µ—Å—è—Ü, –∏ —è –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –±—ã—Ç—å.¬ª",
        parse_mode="Markdown"
    )
    return SITUATION

async def situation_handler(update: Update, context: CallbackContext) -> int:
    context.user_data["previous_state"] = SITUATION  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data["situation"] = update.message.text
    await update.message.reply_text(
        "üÉè *–°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞?*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5. –ù–∞–ø—Ä–∏–º–µ—Ä: 3",
        parse_mode="Markdown"
    )
    return NUM_CARDS

async def num_cards_handler(update: Update, context: CallbackContext) -> int:
    context.user_data["previous_state"] = NUM_CARDS  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    try:
        num_cards = int(update.message.text)
        if num_cards <= 0 or num_cards > 5:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 5 –∫–∞—Ä—Ç
            await update.message.reply_text(
                f"‚ùå *–û—à–∏–±–∫–∞.*\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.",
                parse_mode="Markdown"
            )
            return NUM_CARDS
        context.user_data["num_cards"] = num_cards
    except ValueError:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞.*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
            parse_mode="Markdown"
        )
        return NUM_CARDS

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç
    keyboard = [
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä", callback_data="random_selection")],
        [InlineKeyboardButton("üÉè –í–≤–µ—Å—Ç–∏ –∫–∞—Ä—Ç—ã –≤—Ä—É—á–Ω—É—é", callback_data="manual_selection")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥"
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üÉè *–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç:*",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    return CHOOSE_METHOD

async def choose_method_handler(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "random_selection":
        num_cards = context.user_data["num_cards"]
        await query.edit_message_text("üÉè *–ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–æ–ª–æ–¥—É...*", parse_mode="Markdown")
        await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è

        selected_cards = []
        for i in range(num_cards):
            await query.edit_message_text(f"üé¥ *–í—ã–±–∏—Ä–∞—é –∫–∞—Ä—Ç—É {i + 1}...*", parse_mode="Markdown")
            await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã

            card = random.choice([c for c in tarot_deck if c not in selected_cards])
            selected_cards.append(card)

            # –≠—Ñ—Ñ–µ–∫—Ç "–æ—Ç–∫—Ä—ã—Ç–∏—è" –∫–∞—Ä—Ç—ã
            await query.edit_message_text(f"üé¥ *–ö–∞—Ä—Ç–∞ {i + 1}...*\n\n‚ú® **–û—Ç–∫—Ä—ã–≤–∞—é –∫–∞—Ä—Ç—É:** ‚ú®", parse_mode="Markdown")
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è
            await query.edit_message_text(f"üé¥ *–ö–∞—Ä—Ç–∞ {i + 1}:*\n\nüÉè **{card}**", parse_mode="Markdown")
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç—ã

        context.user_data["selected_cards"] = selected_cards

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_cards")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üÉè *–í—ã—Ç—è–Ω—É—Ç—ã –∫–∞—Ä—Ç—ã:* {', '.join(selected_cards)}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ *¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª*, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return CHOOSE_METHOD
    elif query.data == "manual_selection":
        await query.edit_message_text(
            "üñã *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.*\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –®—É—Ç, –ú–∞–≥, –ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞",
            parse_mode="Markdown"
        )
        return ENTER_CARDS
    elif query.data == "confirm_cards":
        return await generate_interpretation(update, context)
    elif query.data == "back":
        return await back_handler(update, context)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return ConversationHandler.END

async def generate_interpretation(update: Update, context: CallbackContext) -> int:
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ CallbackQuery
    if update.callback_query:
        user_id = update.callback_query.from_user.id
    else:
        user_id = update.message.from_user.id

    selected_cards = context.user_data["selected_cards"]
    question = context.user_data.get("question", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
    situation = context.user_data.get("situation", "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Ç—É–∞—Ü–∏–∏")
    interpretation = generate_tarot_interpretation(question, situation, selected_cards)

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    decrease_attempts(user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–∫–ª–∞–¥
    save_tarot_reading(user_id, "–¢–∞—Ä–æ —Ä–∞—Å–∫–ª–∞–¥", interpretation)

    # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_text = (
        f"‚ú® *–í–∞—à–∏ –∫–∞—Ä—Ç—ã:*\n"
        f"{', '.join(selected_cards)}\n\n"
        f"üìñ *–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:*\n"
        f"{interpretation}\n\n"
        f"üåü *–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥?*\n\n"
        f"üìû *–ó–∞–∫–∞–∂–∏—Ç–µ –ª–∏—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —É –Ω–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!* "
        f"–û–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –∏ –¥–∞—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∞—à–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–º —Ä–∞—Å–∫–ª–∞–¥–µ."
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="order_from_admin")],
        [InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="start_over")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(result_text, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await update.message.reply_text(result_text, reply_markup=reply_markup, parse_mode="Markdown")

    return ConversationHandler.END

async def enter_cards_handler(update: Update, context: CallbackContext) -> int:
    user_input = update.message.text
    selected_cards = [card.strip() for card in user_input.split(",")]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –µ—Å—Ç—å –≤ –∫–æ–ª–æ–¥–µ
    invalid_cards = [card for card in selected_cards if card not in tarot_deck]
    if invalid_cards:
        await update.message.reply_text(
            f"‚ùå *–û—à–∏–±–∫–∞.*\n\n"
            f"–°–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–ª–æ–¥–µ: {', '.join(invalid_cards)}. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç.",
            parse_mode="Markdown"
        )
        return ENTER_CARDS

    context.user_data["selected_cards"] = selected_cards
    return await generate_interpretation(update, context)

async def ask_question_handler(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    question = update.message.text

    if not ADMIN_CHAT_ID:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞.*\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown"
        )
        return ConversationHandler.END

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"üì® *–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å: {question}",
        parse_mode="Markdown"
    )
    await update.message.reply_text(
        "‚úÖ *–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!*\n\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ!",
        parse_mode="Markdown"
    )

    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "‚ùå *–†–∞—Å–∫–ª–∞–¥ –æ—Ç–º–µ–Ω–µ–Ω.*\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        parse_mode="Markdown"
    )
    return ConversationHandler.END

async def back_handler(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
    previous_state = context.user_data.get("previous_state", CHOOSE_METHOD)
    return previous_state

# –û–±–Ω–æ–≤–ª—è–µ–º ConversationHandler
bot.add_handler(CallbackQueryHandler(monthly_subscription_handler, pattern="^monthly_subscription$"))
bot.add_handler(CallbackQueryHandler(one_time_purchase_5_handler, pattern="^one_time_purchase_5$"))
bot.add_handler(CallbackQueryHandler(one_time_purchase_10_handler, pattern="^one_time_purchase_10$"))
bot.add_handler(CallbackQueryHandler(one_time_purchase_15_handler, pattern="^one_time_purchase_15$"))
bot.add_handler(CallbackQueryHandler(pay_monthly_subscription_handler, pattern="^pay_monthly_subscription$"))
bot.add_handler(CallbackQueryHandler(pay_one_time_purchase_5_handler, pattern="^pay_one_time_purchase_5$"))
bot.add_handler(CallbackQueryHandler(pay_one_time_purchase_10_handler, pattern="^pay_one_time_purchase_10$"))
bot.add_handler(CallbackQueryHandler(pay_one_time_purchase_15_handler, pattern="^pay_one_time_purchase_15$"))

# –û–±–Ω–æ–≤–ª—è–µ–º ConversationHandler
conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start), CallbackQueryHandler(button_handler)],
    states={
        CHOOSE_METHOD: [CallbackQueryHandler(choose_method_handler)],
        QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_handler)],
        SITUATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, situation_handler)],
        NUM_CARDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, num_cards_handler)],
        ENTER_CARDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_cards_handler)],
        ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_question_handler)],
    },
    fallbacks=[
        CommandHandler("cancel", cancel),
        CallbackQueryHandler(start_over_handler, pattern="^start_over$"),
        CallbackQueryHandler(back_handler, pattern="^back$"),  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    ],
    per_message=False,
)

# –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler
bot.add_handler(conversation_handler)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.run_polling()