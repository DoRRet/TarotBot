import aiohttp
import uuid
import logging
import ssl
import json
from pathlib import Path
from config import Config
from typing import Optional, Dict, Any


logger = logging.getLogger(__name__)

class TarotInterpreter:
    _card_meanings: Dict[str, Any] = {}
    
    @classmethod
    async def load_meanings(cls):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ä—Ç"""
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π
            paths_to_try = [
                Config.MEANINGS_PATH,
                Path("data/card_meanings.json"),
                Path("../data/card_meanings.json")
            ]
            
            for path in paths_to_try:
                try:
                    with open(path, "r", encoding="utf-8") as f:
                        cls._card_meanings = json.load(f)
                    logger.info(f"Card meanings loaded from {path}")
                    return
                except FileNotFoundError:
                    continue
            
            raise FileNotFoundError("Could not find card meanings file")
            
        except Exception as e:
            logger.error(f"Error loading card meanings: {e}")
            cls._card_meanings = {} 


    @staticmethod
    async def get_access_token() -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è GigaChat API"""
        url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
        
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json',
            'RqUID': str(uuid.uuid4()),
            'Authorization': f'Basic {Config.GIGACHAT_AUTH_KEY}'
        }
        
        data = {
            'scope': Config.GIGACHAT_SCOPE
        }
        
        try:
            ssl_context = ssl.create_default_context(cafile=str(Config.SSL_CERT_PATH))
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url,
                    headers=headers,
                    data=data,
                    ssl=ssl_context,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status != 200:
                        logger.error(f"GigaChat auth failed: {response.status}")
                        return None
                    
                    json_response = await response.json()
                    return json_response.get("access_token")
        except Exception as e:
            logger.error(f"GigaChat auth error: {str(e)}")
            return None

    @staticmethod
    async def generate_interpretation(question: str, situation: str, cards: list) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞"""
        token = await TarotInterpreter.get_access_token()
        if not token:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ GigaChat."

        url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': f'Bearer {token}'
        }

        prompt = f"""–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –æ–ø—ã—Ç–Ω—ã–º —Ç–∞—Ä–æ–ª–æ–≥–æ–º (–¢–∞—Ä–æ –£—ç–π—Ç–∞). –í–æ–ø—Ä–æ—à–∞—é—â–∏–π –∑–∞–¥–∞–ª —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: "{question}". 
–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏: "{situation}". 
–í–æ–ø—Ä–æ—â–∞—é—â–∏–π –≤—ã—Ç—è–Ω—É–ª —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ä—Ç—ã: {", ".join(cards)}.  
–û—Ç–ø—Ä–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –∏–º–µ–Ω–Ω–æ —Å —Ç–∞–∫–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –Ω–∏–∂–µ, –Ω–æ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏ –ø–æ–¥ –∫–∞—Ä—Ç—ã –∏ —Å–∏—Ç—É–∞—Ü–∏—é –≤–æ–ø—Ä–æ—à–∞—é—â–µ–≥–æ("{question}", "{situation}", {", ".join(cards)}). –ü—Ä–∏–º–µ—Ä:

1. ‚ú®–ñ—Ä–∏—Ü–∞‚ú®:
‚≠êÔ∏è –°–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç—É–∏—Ü–∏—é, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä –∏ —ç–º–æ—Ü–∏–∏.
‚≠êÔ∏è –ú–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–∫—Ä—ã—Ç—ã–µ —á—É–≤—Å—Ç–≤–∞ –∏–ª–∏ —Ç–∞–π–Ω—ã.
‚≠êÔ∏è –ß–∞—Å—Ç–æ –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è —Å –∂–µ–Ω—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –∏–Ω—Ç—É–∏—Ü–∏–µ–π.

2. ‚ú®–î—É—Ä–∞–∫‚ú®:
‚≠êÔ∏è –°–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –ø—É—Ç–∏, –±–µ–∑–∑–∞–±–æ—Ç–Ω–æ—Å—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å.
‚≠êÔ∏è –ú–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –Ω–æ–≤—ã–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º.
‚≠êÔ∏è –ß–∞—Å—Ç–æ –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è —Å –Ω–µ–æ–ø—ã—Ç–Ω–æ—Å—Ç—å—é –∏ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å—é.

‚ú®–†–∞–∑–±–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–∏:‚ú®

‚≠êÔ∏è–ñ—Ä–∏—Ü–∞ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–∫—Ä—ã—Ç—ã–µ —á—É–≤—Å—Ç–≤–∞ –î–∞–Ω–∏–ª–∞ –∫ –≤–æ–ø—Ä–æ—à–∞—é—â–µ–º—É, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –Ω–µ –æ—Å–æ–∑–Ω–∞–µ—Ç –∏–ª–∏ –Ω–µ –≤—ã—Ä–∞–∂–∞–µ—Ç, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –µ–≥–æ –∏–Ω—Ç—É–∏—Ü–∏–µ–π –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏, –∞ –î—É—Ä–∞–∫ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ—Ä–æ–≥–µ –Ω–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏–ª–∏ —á—É–≤—Å—Ç–≤, –∏ –µ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å —ç—Ç–∏–º –Ω–æ–≤—ã–º –Ω–∞—á–∞–ª–æ–º.

‚ú®–°–æ–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—à–∞—é—â–µ–≥–æ:‚ú®

‚≠êÔ∏è–ù–µ —Å–ø–µ—à–∏—Ç–µ —Å –≤—ã–≤–æ–¥–∞–º–∏‚≠êÔ∏è, —Ç–∞–∫ –∫–∞–∫ —á—É–≤—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–∫—Ä—ã—Ç—ã–º–∏, –∏ –≤–∞–∂–Ω–æ –¥–∞—Ç—å –î–∞–Ω–∏–ª—É –≤—Ä–µ–º—è –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –æ—Å–æ–∑–Ω–∞–Ω–∏—è —Å–≤–æ–∏—Ö —ç–º–æ—Ü–∏–π, –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –æ–Ω —á—É–≤—Å—Ç–≤—É–µ—Ç, –∏ –Ω–µ –±–æ–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –µ–º—É –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä—è–º—É—é."""

        payload = {
            "model": "GigaChat",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.7,
            "max_tokens": 1024
        }

        try:
            ssl_context = ssl.create_default_context(cafile=str(Config.SSL_CERT_PATH))
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url, 
                    headers=headers, 
                    json=payload, 
                    ssl=ssl_context,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get('choices', [{}])[0].get('message', {}).get('content', '')
                    logger.error(f"GigaChat API error: {await response.text()}")
                    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏"
        except asyncio.TimeoutError:
            logger.error("Timeout generating interpretation")
            return "–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        except Exception as e:
            logger.error(f"Request error: {str(e)}")
            return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"

    @classmethod
    async def get_card_meaning(cls, card_name: str, is_reversed: bool = False) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã —Å —É—á–µ—Ç–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏—è"""
        if not cls._card_meanings:
            await cls.load_meanings()
        
        card_data = cls._card_meanings.get(card_name)
        if not card_data:
            return f"üîÆ –ö–∞—Ä—Ç–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        
        category = card_data.get("category", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        meaning = card_data.get("meaning", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        upright = card_data.get("upright", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        reversed_text = card_data.get("reversed", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        return (
            f"üìñ *{card_name}* ({category}) {'(–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' if is_reversed else ''}\n\n"
            f"üîÆ *–û—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:*\n{meaning}\n\n"
            f"‚≠ê *–ü—Ä—è–º–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:*\n{upright}\n\n"
            f"üåÄ *–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:*\n{reversed_text}"
        )
    
    @classmethod
    async def search_cards(cls, query: str) -> list:
        """–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        if not cls._card_meanings:
            await cls.load_meanings()
        
        results = []
        query_lower = query.lower()
        
        for card_name, card_data in cls._card_meanings.items():
            if query_lower in card_name.lower():
                results.append((card_name, card_data.get("category", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")))
        
        return results