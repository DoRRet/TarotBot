import aiohttp
import uuid
import logging
import ssl
import json
from pathlib import Path
from config import Config
from typing import Optional, Dict, Any


logger = logging.getLogger(__name__)

class TarotInterpreter:
    _card_meanings: Dict[str, Any] = {}
    
    @classmethod
    async def load_meanings(cls):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ä—Ç"""
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π
            paths_to_try = [
                Config.MEANINGS_PATH,
                Path("data/card_meanings.json"),
                Path("../data/card_meanings.json")
            ]
            
            for path in paths_to_try:
                try:
                    with open(path, "r", encoding="utf-8") as f:
                        cls._card_meanings = json.load(f)
                    logger.info(f"Card meanings loaded from {path}")
                    return
                except FileNotFoundError:
                    continue
            
            raise FileNotFoundError("Could not find card meanings file")
            
        except Exception as e:
            logger.error(f"Error loading card meanings: {e}")
            cls._card_meanings = {} 


    @staticmethod
    async def get_access_token() -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è GigaChat API"""
        url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
        
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json',
            'RqUID': str(uuid.uuid4()),
            'Authorization': f'Basic {Config.GIGACHAT_AUTH_KEY}'
        }
        
        data = {
            'scope': Config.GIGACHAT_SCOPE
        }
        
        try:
            ssl_context = ssl.create_default_context(cafile=str(Config.SSL_CERT_PATH))
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url,
                    headers=headers,
                    data=data,
                    ssl=ssl_context,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status != 200:
                        logger.error(f"GigaChat auth failed: {response.status}")
                        return None
                    
                    json_response = await response.json()
                    return json_response.get("access_token")
        except Exception as e:
            logger.error(f"GigaChat auth error: {str(e)}")
            return None

    @staticmethod
    async def generate_interpretation(question: str, situation: str, cards: list) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞"""
        token = await TarotInterpreter.get_access_token()
        if not token:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ GigaChat."

        url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': f'Bearer {token}'
        }

        prompt = f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ (–¢–∞—Ä–æ –£—ç–π—Ç–∞), –¥–∞—ë—à—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –∫—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –±–µ–∑ –º–∏—Å—Ç–∏–∫–∏ –∏ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏.

–í–æ–ø—Ä–æ—Å: "{question}".
–°–∏—Ç—É–∞—Ü–∏—è: "{situation}".
–í—ã–ø–∞–ª–∏ –∫–∞—Ä—Ç—ã: {", ".join(cards)}.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É:

1. ‚ú®–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã‚ú®:
‚≠êÔ∏è –ì–ª–∞–≤–Ω–∞—è —Å—É—Ç—å (1 –∫–æ—Ä–æ—Ç–∫–∞—è –º—ã—Å–ª—å).
‚≠êÔ∏è –í–ª–∏—è–Ω–∏–µ –∏–ª–∏ –Ω—é–∞–Ω—Å (1 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–º–µ–Ω—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Ç–µ–º, –∫–∞–∫–∏–µ –µ—â—ë –∫–∞—Ä—Ç—ã –≤—ã–ø–∞–ª–∏).
‚≠êÔ∏è –°–æ–≤–µ—Ç –∏–ª–∏ –æ–±—Ä–∞–∑ (1 –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥).

(–°–¥–µ–ª–∞–π —Ç–∞–∫–æ–π –±–ª–æ–∫ –¥–ª—è –ö–ê–ñ–î–û–ô –∫–∞—Ä—Ç—ã. –í–∞–∂–Ω–æ: –ø—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–π ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, —É–∫–∞–∂–∏, –∫–∞–∫ –∫–∞—Ä—Ç–∞ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏, —É—Å–∏–ª–∏–≤–∞–µ—Ç –∏–ª–∏ –æ—Å–ª–∞–±–ª—è–µ—Ç –æ–±—â–∏–π —Å–º—ã—Å–ª —Ä–∞—Å–∫–ª–∞–¥–∞. –ù–æ –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –æ–¥–Ω–∞ - –Ω–µ –ø–∏—à–∏ –ø—Ä–æ —Å–æ—á–µ—Ç–∞–Ω–∏—è)

‚ú®–†–∞–∑–±–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–∏:‚ú®
‚≠êÔ∏è 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å—É—Ç–∏, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç ‚Äî —É—á–∏—Ç—ã–≤–∞–π –≤–æ–ø—Ä–æ—Å, –¥–µ—Ç–∞–ª–∏ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ —Ç–æ, –∫–∞–∫ –∫–∞—Ä—Ç—ã "—Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ", –∞ –Ω–µ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏. –°–≤—è–∑—ã–≤–∞–π –∑–Ω–∞—á–µ–Ω–∏—è, –∏–∑–±–µ–≥–∞–π –≤–æ–¥—ã.

‚ú®–°–æ–≤–µ—Ç:‚ú®
‚≠êÔ∏è 2‚Äì3 –ø—Ä–∞–∫—Ç–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî —á—Ç–æ –¥–µ–ª–∞—Ç—å –∏–ª–∏ –Ω–∞–¥ —á–µ–º –∑–∞–¥—É–º–∞—Ç—å—Å—è. –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –±–µ–∑ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏.

–°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π —Å—Ç–∏–ª—å –∏ –ø—Ä–∞–≤–∏–ª–∞:
‚Äî –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞–∫ –≤—ã—à–µ, —Å —ç–º–æ–¥–∑–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏.
‚Äî –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –≤—ã–ø–∞–ª–∞ –æ–¥–Ω–∞ - –Ω–µ –ø–∏—à–∏ –ø—Ä–æ —Å–æ—á–µ—Ç–∞–Ω–∏—è –∏ —Å—Ç–æ—è—â–∏–µ —Ä—è–¥–æ–º –∫–∞—Ä—Ç—ã.
‚Äî –í—Å—ë ‚Äî –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ, –±–µ–∑ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä–∞–∑, –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã.
‚Äî –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç: 8‚Äì12 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –ø—Ä–∏–º–µ—Ä–Ω–æ 120‚Äì180 —Å–ª–æ–≤.
‚Äî –°—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
‚Äî –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã, –Ω–µ —É–ø–æ–º–∏–Ω–∞–π "–º–∞–≥–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç–æ–∫–∏", "–≤—ã—Å—à–∏–µ —Å–∏–ª—ã" –∏ —Ç.–ø.
"""

        payload = {
            "model": "GigaChat",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.7,
            "max_tokens": 1024
        }

        try:
            ssl_context = ssl.create_default_context(cafile=str(Config.SSL_CERT_PATH))
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url, 
                    headers=headers, 
                    json=payload, 
                    ssl=ssl_context,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get('choices', [{}])[0].get('message', {}).get('content', '')
                    logger.error(f"GigaChat API error: {await response.text()}")
                    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏"
        except asyncio.TimeoutError:
            logger.error("Timeout generating interpretation")
            return "–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        except Exception as e:
            logger.error(f"Request error: {str(e)}")
            return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"

    @classmethod
    async def get_card_meaning(cls, card_name: str, is_reversed: bool = False) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã —Å —É—á–µ—Ç–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏—è"""
        if not cls._card_meanings:
            await cls.load_meanings()
        
        card_data = cls._card_meanings.get(card_name)
        if not card_data:
            return f"üîÆ –ö–∞—Ä—Ç–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        
        category = card_data.get("category", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        meaning = card_data.get("meaning", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        upright = card_data.get("upright", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        reversed_text = card_data.get("reversed", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        return (
            f"üìñ *{card_name}* ({category}) {'(–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' if is_reversed else ''}\n\n"
            f"üîÆ *–û—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:*\n{meaning}\n\n"
            f"‚≠ê *–ü—Ä—è–º–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:*\n{upright}\n\n"
            f"üåÄ *–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:*\n{reversed_text}"
        )
    
    @classmethod
    async def search_cards(cls, query: str) -> list:
        """–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        if not cls._card_meanings:
            await cls.load_meanings()
        
        results = []
        query_lower = query.lower()
        
        for card_name, card_data in cls._card_meanings.items():
            if query_lower in card_name.lower():
                results.append((card_name, card_data.get("category", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")))
        
        return results